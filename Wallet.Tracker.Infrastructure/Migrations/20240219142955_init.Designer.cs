// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wallet.Tracker.Infrastructure;

#nullable disable

namespace Wallet.Tracker.Infrastructure.Migrations
{
    [DbContext(typeof(PosgresDbContext))]
    [Migration("20240219142955_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Chain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chain");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20Token", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ChainId")
                        .HasColumnType("text");

                    b.Property<bool>("ContractCodePublished")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExistAtCoinmarketCap")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Address", "ChainId");

                    b.HasIndex("ChainId");

                    b.ToTable("Erc20Token");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("At")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ChainId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NativeAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TokenAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransferType")
                        .HasColumnType("integer");

                    b.Property<string>("TxHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WalletAddress");

                    b.HasIndex("TokenAddress", "ChainId");

                    b.ToTable("Erc20Transaction");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20TransactionChain", b =>
                {
                    b.Property<Guid>("Erc20TransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChainId")
                        .HasColumnType("text");

                    b.HasKey("Erc20TransactionId", "ChainId");

                    b.HasIndex("ChainId");

                    b.HasIndex("Erc20TransactionId")
                        .IsUnique();

                    b.ToTable("Erc20TransactionChain");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.WalletChain", b =>
                {
                    b.Property<string>("WalletAddress")
                        .HasColumnType("text");

                    b.Property<string>("ChainId")
                        .HasColumnType("text");

                    b.HasKey("WalletAddress", "ChainId");

                    b.HasIndex("ChainId");

                    b.ToTable("WalletChain");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.WalletData", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MoralisStreamId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Address");

                    b.ToTable("WalletData");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20Token", b =>
                {
                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.Chain", "Chain")
                        .WithMany()
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20Transaction", b =>
                {
                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.WalletData", null)
                        .WithMany("Erc20Transactions")
                        .HasForeignKey("WalletAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.Erc20Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenAddress", "ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20TransactionChain", b =>
                {
                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.Chain", "Chain")
                        .WithMany()
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.Erc20Transaction", "Erc20Transaction")
                        .WithOne("TransactionChain")
                        .HasForeignKey("Wallet.Tracker.Domain.Models.Entities.Erc20TransactionChain", "Erc20TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");

                    b.Navigation("Erc20Transaction");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.WalletChain", b =>
                {
                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.Chain", "Chain")
                        .WithMany()
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wallet.Tracker.Domain.Models.Entities.WalletData", "Wallet")
                        .WithMany("TrackingChains")
                        .HasForeignKey("WalletAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.Erc20Transaction", b =>
                {
                    b.Navigation("TransactionChain")
                        .IsRequired();
                });

            modelBuilder.Entity("Wallet.Tracker.Domain.Models.Entities.WalletData", b =>
                {
                    b.Navigation("Erc20Transactions");

                    b.Navigation("TrackingChains");
                });
#pragma warning restore 612, 618
        }
    }
}
